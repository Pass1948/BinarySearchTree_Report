namespace BinarySearchTree_Report
{
    internal class Program
    {
        /******************************************************
		 * 이진탐색트리 (BinarySearchTree)
		 * 
		 * 이진속성과 탐색속성을 적용한 트리
		 * 이진탐색을 통한 탐색영역을 절반으로 줄여가며 탐색 가능
		 * 이진 : 부모노드는 최대 2개의 자식노드들을 가질 수 있음
		 * 탐색 : 자신의 노드보다 작은 값들은 왼쪽, 큰 값들은 오른쪽에 위치( 1 - 5 - 8)
		 * 탐색에 있어 이분법적인 탐색이 가능한 트리임
		 * 큰값은 탐색하면 작은값은 고려안하는 이분법적인 계산이 들어가서 (반대도 동일) 효율성이 좋다
		 * 
		 ******************************************************/

        /*******************************************************
         * <이진탐색트리의 한계점>
         * 시간복잡도상에는 정말 좋은 효율성을 보여주지만 이진탐색트리상 한쪽에 불균형이 일어나면
         * 효율성이 모두 O(N)만큼 증가하여 비효율적인 구조를 갖게된다
         * 이러한 현상을 막기 위해 트리의 좌회전 또는 우회전 하여 균형을 맞추는 형식의
         * 자가균형기능을 추가하여 트리의 높이 규형을 맞추는데
         * 대표적으로 Red-Black Tree, AVL Tree 등의 방식들이 있다
         * 각 방식들이 색을 지정 하거나 값을 지정해서 트리의 균형을 맞추는등 
         * 종류에 따라 조금씩 다르지만 트리의 균형을 맞춘다라는 공통점이 있다
         ********************************************************/
        /*******************************************************
         * <트리기반 자료구조의 순회>
         * 트리의 모든 노드들을 방문하는 과정을 트리 순회(TreeTraversal)라고 하는데 아래와 같은 3가지 순회가 있다
         * 1. 전위순회 : 본인(출력)-왼쪽(방문)-오른쪽(방문) 순으로 이뤄진다 
         * ex. 8(0세대), 3-10(1세대), 1-6 /  -14 (2세대), - / 4-7 / 13 -(3세대) => 정렬 : 8 - 3 - 1 - 6 - 4 - 7 - 10 - 14 - 13
         * 
         * 2. 중위순회 : 왼쪽(방문)-본인(출력)-오른쪽(방문) 순으로 이뤄진다
         * 이진탐색 트리에서는 중위순회의 정렬된 형태로 출력된다(오름차순)
         * ex. 8(0세대), 3-10(1세대), 1-6 /  -14 (2세대), - / 4-7 / 13 -(3세대) =>정렬 : 1 - 3 - 4 - 6 - 7 - 8 - 10 - 13 - 14
         * 
         * 3. 후위순회 : 왼쪽(방문)-오른쪽(방문)-본인(출력) 순으로 이뤄진다
         * ex. 8(0세대), 3-10(1세대), 1-6 /  -14 (2세대), - / 4-7 / 13 -(3세대) =>정렬 : 1 - 4 - 7 - 6 - 3 - 13 - 14 - 10 - 8
         ********************************************************/

        static void Main(string[] args)
        {
           
        }
    }
}